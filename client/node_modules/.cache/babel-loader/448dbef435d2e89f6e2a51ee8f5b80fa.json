{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\skyrim\\\\client\\\\src\\\\components\\\\ResultsMap.js\";\nimport React from \"react\";\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResultsMap(_ref) {\n  let {\n    locations,\n    guessLocation,\n    round\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-map\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [40, 0],\n      zoom: 1,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        minZoom: 1,\n        maxZoom: 8,\n        noWrap: true,\n        url: \"https://tiles.modmapper.com/{z}/{x}/{y}.jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), JSON.stringify(locations), guessLocation.longitude, guessLocation.latitude]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ResultsMap;\nexport default ResultsMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultsMap\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","ResultsMap","locations","guessLocation","round","JSON","stringify","longitude","latitude"],"sources":["C:/react/skyrim/client/src/components/ResultsMap.js"],"sourcesContent":["import React from \"react\";\r\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\";\r\n\r\nfunction ResultsMap({ locations, guessLocation, round }) {\r\n  return (\r\n    <div className=\"results-map\">\r\n      <MapContainer center={[40, 0]} zoom={1} scrollWheelZoom={true}>\r\n        <TileLayer\r\n          minZoom={1}\r\n          maxZoom={8}\r\n          noWrap={true}\r\n          url=\"https://tiles.modmapper.com/{z}/{x}/{y}.jpg\"\r\n        />\r\n\r\n        {JSON.stringify(locations)}\r\n        {guessLocation.longitude}\r\n        {guessLocation.latitude}\r\n\r\n        {/* {locations && guessLocation ? (\r\n          <>\r\n            <Marker\r\n              position={[locations[round].longitude, locations[round].latitude]}\r\n            ></Marker>\r\n\r\n            <Marker\r\n              position={[guessLocation.longitude, guessLocation.latitude]}\r\n            ></Marker>\r\n          </>\r\n        ) : null} */}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultsMap;\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,MAAlC,QAAgD,eAAhD;;;AAEA,SAASC,UAAT,OAAyD;EAAA,IAArC;IAAEC,SAAF;IAAaC,aAAb;IAA4BC;EAA5B,CAAqC;EACvD,oBACE;IAAK,SAAS,EAAC,aAAf;IAAA,uBACE,QAAC,YAAD;MAAc,MAAM,EAAE,CAAC,EAAD,EAAK,CAAL,CAAtB;MAA+B,IAAI,EAAE,CAArC;MAAwC,eAAe,EAAE,IAAzD;MAAA,wBACE,QAAC,SAAD;QACE,OAAO,EAAE,CADX;QAEE,OAAO,EAAE,CAFX;QAGE,MAAM,EAAE,IAHV;QAIE,GAAG,EAAC;MAJN;QAAA;QAAA;QAAA;MAAA,QADF,EAQGC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CARH,EASGC,aAAa,CAACI,SATjB,EAUGJ,aAAa,CAACK,QAVjB;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA4BD;;KA7BQP,U;AA+BT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}